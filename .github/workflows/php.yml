# GitHub Action for Laravel with MySQL and Redis
name: Testing Laravel with MySQL
on: [push, pull_request]
jobs:
  laravel:
    name: Laravel (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest
    env:
      DB_DATABASE: laravel
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.3', '7.4']
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo, mysql, intl
          coverage: xdebug #optional
          ini-values: post_max_size=256M, short_open_tag=On
          tools: php-cs-fixer, phpunit, phpmd, phpstan, phpcs, phpcpd

      - name: Start mysql service
        run: sudo /etc/init.d/mysql start

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
        working-directory: ./src

      - name: Install Composer dependencies
        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
        working-directory: ./src

      - name: Prepare the application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate
        working-directory: ./src

      - name: Clear Config
        run: php artisan config:clear
        working-directory: ./src

      - name: Run Migration
        run: php artisan migrate -v
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
        working-directory: ./src

      - name: Test with PHPUnit
        run: phpunit --coverage-text
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
        working-directory: ./src

      - name: Run PHP Mess Detector(PHPMD)
        run: |
          phpmd app --reportfile ./phpmd.result.xml xml ../.github/workflows/phpmd.ruleset.xml --ignore-violations-on-exit
          value=`cat ./phpmd.result.xml`
          echo $value
        working-directory: ./src

      - name: Upload PHPMD File
        uses: actions/upload-artifact@v1
        with:
          name: output
          path: ./phpmd.result.xml
        working-directory: ./src

      - name: Run PHP_CodeSniffer(PHPCS)
        run: |
          phpcs --report-file=./phpcs.result.xml --standard=../.github/workflows/phpcs.xml app || true
          value=`cat ./phpcs.result.xml`
          echo $value
        working-directory: ./src

      - name: Upload PHPCS File
        uses: actions/upload-artifact@v1
        with:
          name: output
          path: ./phpcs.result.xml
        working-directory: ./src

      - name: Run PHP Copy/Paste Detector(PHPCPD)
        run: |
          phpcpd app --log-pmd=./phpcpd.result.xml || true
          value=`cat ./phpcpd.result.xml`
          echo $value
        working-directory: ./src

      - name: Upload PHPCPD File
        uses: actions/upload-artifact@v1
        with:
          name: output
          path: ./phpcpd.result.xml
        working-directory: ./src

      - name: Run PHP Static Analysis Tool(PHPStan)
        run: |
          phpstan analyse app > ./phpstan.result.txt || true
          value=`cat ./phpstan.result.txt`
          echo $value
        working-directory: ./src

      - name: Upload PHPStan File
        uses: actions/upload-artifact@v1
        with:
          name: output
          path: ./phpstan.result.txt
        working-directory: ./src
